diff -ruN syncwsn_code/drivers/rtc.cpp syncwsn_code_temp/drivers/rtc.cpp
--- syncwsn_code/drivers/rtc.cpp	2012-08-02 16:03:59.636066762 +0200
+++ syncwsn_code_temp/drivers/rtc.cpp	2012-09-18 16:56:51.964788430 +0200
@@ -132,9 +132,16 @@
     TIM7->CR1 |= TIM_CR1_CEN;
 }
 
+//--------------
+typedef Gpio<GPIOC_BASE,8> fixme;
+//--------------
+
 bool AuxiliaryTimer::waitForPacketOrTimeout()
 {
     FastInterruptDisableLock dLock;
+	
+	fixme::low();
+	
     while(packetReceived==false && timeout==false)
     {
         timeoutWaiting=Thread::IRQgetCurrentThread();
@@ -145,12 +152,20 @@
         }
     }
     packetReceived=false;
+	
+	fixme::high();
+	
     return timeout;
 }
 
+
+
 void AuxiliaryTimer::waitForTimeout()
 {
     FastInterruptDisableLock dLock;
+	
+	fixme::low();
+	
     while(timeout==false)
     {
         timeoutWaiting=Thread::IRQgetCurrentThread();
@@ -160,6 +175,9 @@
             Thread::yield();
         }
     }
+	
+	fixme::high();
+	
 }
 
 void AuxiliaryTimer::stopTimeoutTimer()
@@ -228,6 +246,9 @@
 void Rtc::wait()
 {
     FastInterruptDisableLock dLock;
+	
+	fixme::low();
+	
     while(rtcInterrupt==false)
     {
         waiting=Thread::IRQgetCurrentThread();
@@ -237,6 +258,9 @@
             Thread::yield();
         }
     }
+	
+	fixme::high();
+	
 }
 
 void Rtc::sleepAndWait()
@@ -246,6 +270,9 @@
     {
         FastInterruptDisableLock dLock;
         if(rtcInterrupt) return;
+		
+		fixme::low();
+		
         PWR->CR |= PWR_CR_LPDS;
         SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
         
@@ -273,6 +300,9 @@
 
         RCC->CR |= RCC_CR_PLLON;
         while((RCC->CR & RCC_CR_PLLRDY)==0) ;
+		
+		fixme::high();
+		
         RCC->CFGR &= ~RCC_CFGR_SW;
         RCC->CFGR |= RCC_CFGR_SW_PLL;    
         while((RCC->CFGR & RCC_CFGR_SWS)!=0x08) ; 
diff -ruN syncwsn_code/experiment.conf syncwsn_code_temp/experiment.conf
--- syncwsn_code/experiment.conf	2012-09-18 17:33:43.351754905 +0200
+++ syncwsn_code_temp/experiment.conf	2012-09-18 16:23:58.531071913 +0200
@@ -3,9 +3,9 @@
 # deployable on the testing server.
 
 # General config parameters
-experiment_name="dynamicwindow_absoluteclock_multihop_60s_5d_6"
-experiment_time="5*24*60*60"
-sync_period="60"
+experiment_name="test"
+experiment_time="24*60*60"
+sync_period="2"
 relative_clock="0"
 interactive_rootnode="0"
 
@@ -14,9 +14,9 @@
 node0_second_hop="0"
 
 # Node 1
-node1_file="flopsync_dynamic_multihop.cpp"
+node1_file="flopsync_dynamic_singlehop.cpp"
 node1_second_hop="0"
 
 # Node 2
-node2_file="flopsync_dynamic_multihop.cpp"
-node2_second_hop="1"
+node2_file="flopsync_dynamic_singlehop.cpp"
+node2_second_hop="0"
diff -ruN syncwsn_code/flopsync_dynamic_singlehop.cpp syncwsn_code_temp/flopsync_dynamic_singlehop.cpp
--- syncwsn_code/flopsync_dynamic_singlehop.cpp	2012-08-04 11:50:40.947255034 +0200
+++ syncwsn_code_temp/flopsync_dynamic_singlehop.cpp	2012-09-18 18:49:33.584383877 +0200
@@ -49,6 +49,10 @@
 
 static const char expectedPacket[]={0x01, 0x02, 0x03, 0x04};
 
+//--------------
+typedef miosix::Gpio<GPIOC_BASE,8> fixme;
+//--------------
+
 class VarianceEstimator
 {
 public:
@@ -150,12 +154,20 @@
         t+=nominalPeriod+u-(dwo-dwoo);
         rtc.setAbsoluteWakeup(t);
         #endif //RELATIVE_CLOCK
+		
+		fixme::low(); //To avoid the time spent in printf being considered
+		
         printf("ctr=%d e=%d u=%d w=%d\n",ctr,e,u,dwo);
     }
 }
 
 int main()
 {
+	//--------------
+    fixme::mode(miosix::Mode::OUTPUT);
+    fixme::low();
+    //--------------
+
     puts(experimentName);
     const unsigned char address[]={0xab, 0xcd, 0xef};
     Nrf24l01& nrf=Nrf24l01::instance();
diff -ruN syncwsn_code/flopsync_rootnode.cpp syncwsn_code_temp/flopsync_rootnode.cpp
--- syncwsn_code/flopsync_rootnode.cpp	2012-08-04 11:51:25.275474843 +0200
+++ syncwsn_code_temp/flopsync_rootnode.cpp	2012-09-18 16:29:09.148613338 +0200
@@ -49,6 +49,10 @@
 static pthread_cond_t cond=PTHREAD_COND_INITIALIZER;
 static unsigned int period=nominalPeriod;
 
+//--------------
+typedef miosix::Gpio<GPIOC_BASE,8> fixme;
+//--------------
+
 static void* sendThread(void*)
 {
     const unsigned char address[]={0xab, 0xcd, 0xef};
@@ -110,6 +114,11 @@
 
 int main()
 {
+    //--------------
+    fixme::mode(miosix::Mode::OUTPUT);
+    fixme::low();
+    //--------------
+
     puts(experimentName);
     pthread_attr_t attr;
     pthread_attr_init(&attr);
