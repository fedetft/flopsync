diff -ruN gcc-4.7.3-old/gcc/config/arm/arm.c gcc-4.7.3/gcc/config/arm/arm.c
--- gcc-4.7.3-old/gcc/config/arm/arm.c	2013-03-18 12:52:08.000000000 +0100
+++ gcc-4.7.3/gcc/config/arm/arm.c	2014-03-28 16:44:43.708037995 +0100
@@ -5371,6 +5371,7 @@
       || GET_CODE (orig) == LABEL_REF)
     {
       rtx insn;
+      char miosix_is_rodata=0;
 
       if (reg == 0)
 	{
@@ -5378,35 +5379,81 @@
 	  reg = gen_reg_rtx (Pmode);
 	}
 
+      /* If miosix custom compilation for processes is enabled, we verify if
+         the variable is const or not. Then we'll access all the data except for
+         readonly section, via GOT. For rodata we'll use pc-realtive addressing. */	
+      if ( TARGET_SINGLE_PIC_BASE && SYMBOL_REF_HAS_BLOCK_INFO_P(orig) 
+           && SYMBOL_REF_BLOCK(orig) != NULL 
+           && ( ( strstr(SYMBOL_REF_BLOCK(orig)->sect->named.name,".rodata" ) != NULL ) 
+                || (SYMBOL_REF_BLOCK(orig)->sect == readonly_data_section ))){           
+           miosix_is_rodata=1;
+           /*printf("\n++Value of SYMBOL_REF within legitimize_pic_address: %#X",SYMBOL_REF_FLAGS (orig));*/
+           
+         }
+
       /* VxWorks does not impose a fixed gap between segments; the run-time
 	 gap can be different from the object-file gap.  We therefore can't
 	 use GOTOFF unless we are absolutely sure that the symbol is in the
 	 same segment as the GOT.  Unfortunately, the flexibility of linker
 	 scripts means that we can't be sure of that in general, so assume
 	 that GOTOFF is never valid on VxWorks.  */
-      if ((GET_CODE (orig) == LABEL_REF
-	   || (GET_CODE (orig) == SYMBOL_REF &&
-	       SYMBOL_REF_LOCAL_P (orig)))
-	  && NEED_GOT_RELOC
-	  && !TARGET_VXWORKS_RTP)
-	insn = arm_pic_static_addr (orig, reg);
-      else
-	{
-	  rtx pat;
-	  rtx mem;
+      
+      if(TARGET_SINGLE_PIC_BASE){
+	
+	      if ((GET_CODE (orig) == LABEL_REF
+		   || (GET_CODE (orig) == SYMBOL_REF 
+		       && SYMBOL_REF_LOCAL_P (orig)))
+		   && NEED_GOT_RELOC
+		   && miosix_is_rodata )
+		insn = arm_pic_static_addr (orig, reg);
+	      else
+		{
+	
+		  rtx pat;
+		  rtx mem;
+	
+		  /* If this function doesn't have a pic register, create one now.  */
+		  require_pic_register ();
+
+		  pat = gen_calculate_pic_address (reg, cfun->machine->pic_reg, orig);
+
+		  /* Make the MEM as close to a constant as possible.  */
+		  mem = SET_SRC (pat);
+		  gcc_assert (MEM_P (mem) && !MEM_VOLATILE_P (mem));
+		  MEM_READONLY_P (mem) = 1;
+		  MEM_NOTRAP_P (mem) = 1;
+
+		  insn = emit_insn (pat);
+		}
+	
+	}else{
+
+		if ((GET_CODE (orig) == LABEL_REF
+		   || (GET_CODE (orig) == SYMBOL_REF 
+		       && SYMBOL_REF_LOCAL_P (orig)))
+		   && NEED_GOT_RELOC
+		   && !TARGET_VXWORKS_RTP)
+		insn = arm_pic_static_addr (orig, reg);
+	      else
+		{
+
+		  rtx pat;
+		  rtx mem;
 
-	  /* If this function doesn't have a pic register, create one now.  */
-	  require_pic_register ();
+		  /* If this function doesn't have a pic register, create one now.  */
+		  require_pic_register ();
 
-	  pat = gen_calculate_pic_address (reg, cfun->machine->pic_reg, orig);
+		  pat = gen_calculate_pic_address (reg, cfun->machine->pic_reg, orig);
 
-	  /* Make the MEM as close to a constant as possible.  */
-	  mem = SET_SRC (pat);
-	  gcc_assert (MEM_P (mem) && !MEM_VOLATILE_P (mem));
-	  MEM_READONLY_P (mem) = 1;
-	  MEM_NOTRAP_P (mem) = 1;
+		  /* Make the MEM as close to a constant as possible.  */
+		  mem = SET_SRC (pat);
+		  gcc_assert (MEM_P (mem) && !MEM_VOLATILE_P (mem));
+		  MEM_READONLY_P (mem) = 1;
+		  MEM_NOTRAP_P (mem) = 1;
+
+		  insn = emit_insn (pat);
+		}
 
-	  insn = emit_insn (pat);
 	}
 
       /* Put a REG_EQUAL note on this insn, so that it can be optimized
@@ -18023,8 +18070,8 @@
 	  (GET_CODE (x) == SYMBOL_REF || GET_CODE (x) == LABEL_REF))
 	{
 	  /* See legitimize_pic_address for an explanation of the
-	     TARGET_VXWORKS_RTP check.  */
-	  if (TARGET_VXWORKS_RTP
+	     TARGET_VXWORKS_RTP check and the miosix process layout  */
+          if (TARGET_VXWORKS_RTP || TARGET_SINGLE_PIC_BASE
 	      || (GET_CODE (x) == SYMBOL_REF && !SYMBOL_REF_LOCAL_P (x)))
 	    fputs ("(GOT)", asm_out_file);
 	  else
@@ -23027,6 +23074,33 @@
     SYMBOL_REF_FLAG (XEXP (rtl, 0)) = 1;
 
   default_encode_section_info (decl, rtl, first);
+  
+#if 0
+  /* If we are compiling for a miosix process mark down that the declaration is
+     constant
+     FIXME: here we have a bug. Any marking of SYMBOL_REF_FLAGS will not be preserved
+     during transformation and optimization processing of the IR. Actually those
+     metadata will be overwritten during the compilation process */
+     /*
+  if(TARGET_SINGLE_PIC_BASE){
+  	/* Careful not to prod global register variables.  */
+  	if (!MEM_P (rtl))
+	    return;
+  	/* Mark the data coming from readonly decl, assuming no relocation for 
+  	   categorize_decl_for_section  */ 
+	if (GET_CODE (XEXP (rtl, 0)) != SYMBOL_REF)
+	  return;
+    
+	if(decl_readonly_section(decl,0)){
+	    SYMBOL_REF_FLAGS (XEXP (rtl, 0)) |= SYMBOL_FLAG_READONLY_DECL;
+	    /*
+	    printf("\nconst value found!!");
+	    printf("\nflags value is %#X", SYMBOL_REF_FLAGS (XEXP (rtl, 0)));
+	    */
+	 }
+   }	
+#endif
+
 }
 #endif /* !ARM_PE */
 
diff -ruN gcc-4.7.3-old/gcc/config/arm/arm.h gcc-4.7.3/gcc/config/arm/arm.h
--- gcc-4.7.3-old/gcc/config/arm/arm.h	2013-03-14 19:52:18.000000000 +0100
+++ gcc-4.7.3/gcc/config/arm/arm.h	2014-03-28 16:42:14.196054321 +0100
@@ -1674,6 +1674,19 @@
    Shifts in addresses can't be by a register.  */
 #define MAX_REGS_PER_ADDRESS 2
 
+/* Flag to mark constant decls before RTL pass. We would
+   really like to have to know if any rtx operand is going to be placed in a
+   readonly section.
+   NOTE: there aren't any other custom symbol_flag defined for arm arch.
+   FIXME: by now marking a node of the tree in the IR is useless because any byte
+   except of the least significant one is overwritten during the code transformation.
+   We should provide that all the metadata bytes will not be overwritten. */
+/*
+#define SYMBOL_FLAG_READONLY_DECL	(SYMBOL_FLAG_MACH_DEP << 2)
+#define SYMBOL_REF_READONLY_DECL_P(X)	\
+	((SYMBOL_REF_FLAGS (X) & SYMBOL_FLAG_READONLY_DECL) != 0)
+*/
+
 /* Recognize any constant value that is a valid address.  */
 /* XXX We can address any constant, eventually...  */
 /* ??? Should the TARGET_ARM here also apply to thumb2?  */
