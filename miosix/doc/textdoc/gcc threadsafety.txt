Note: this is no longer a TODO, since essentially everything has been done as
of Miosix 1.58. Only kept for historic reasons.
=============================================================================

Useful info

 libstdc++-v3/doc/html/manual/internals.html#internals.thread_safety
 libstdc++-v3/doc/html/manual/ext_concurrency.htm 

Key areas to make libstdc++ threadsafe
- gcc/gthr.h is the root of all thread safety issues. Added gthr-miosix.h
  FIXED

- _Atomic_word, and its supporting operations need to be available in
  libstdc++/config/cpu/<cpuname>
  FIXED

- libstdc++/include/ext/concurrence.h declares __mutex, __recursive_mutex and
  __cond used throughut the library, that should work with posix stuff but
  pull in exceptions. Easy to fix with #undef __EXCEPTIONS in that file.
  FIXED

- libstdc++/include/ext/concurrence.h defines _Lock_policy which is then used
  as a template parameter to specialize stuff for thread safety. Should be
  automatically fixed given __GTHREADS is defined. Indeed, it is set to
  _S_mutex meaning that each shared_ptr or weak_ptr will contain a mutex.
  (This because of the lack of compare and swap atomic op).
  FIXED

- eh_globals.cc uses TLS.
  FIXED

- unwind-sjlj.cc uses TLS.
  FIXED

- Check the value of #define __glibcxx_base_allocator to see if it's the
  new allocator, otherwise since the mt_allocator requires TLS which isn't
  provided. grep -R "__glibcxx_base_allocator" . in the install dir shows
  it's the new allocator.
  FIXED
