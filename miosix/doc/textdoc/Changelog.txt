Changelog for Miosix np embedded OS

v1.60
- Fixed a bug in ST code for the stm3220g-eval board: despite having a 2MB RAM,
  A18, A19 and A20 were left as GPIOs, resulting in issues when accessing the
  upper part of the RAM.
- Added util/lcd44780.h and util/lcd44780.cpp with support for the common
  HD44780 LCD displays
- Added Gpio::getPin() to convert from a Gpio to a GpioPin class
- Added GpioPin class to make it easier to pass a Gpio as a parameter to a
  function
- Fixed the stm32 SDIO driver to prevent a glitch on the CMD pin from creating
  isues with the card initialization.
- Added EthBoardV2 board to the list of supported boards
- Added configurations support to the Netbeans project. There is now one
  configuration for each supported board. This improves code completion for
  architecture and board specific symbols. Note that selecting a board from the
  IDE does not replace the need to edit miosix/config/Makefile.inc
- Adapted sad_trombone example to also support the stm32f4discovery board
- Added support to stm3220g-eval to miosix/bootloaders/stm32, and renamed
  folder (before it was miosix/bootloaders/stm3210e-eval)
- Added linker scripts that support external ram to stm3220g-eval
- Added external RAM support to stm3220g-eval
- Added make program support to flash the stm3210e-eval using the stm32flash
  utility
- Fixed a bug in the stm3210e-eval related to the xram linker script:
  the stack pointer was set to the external RAM before that ram was enabled
- Fixed a bug in SoftwareSPI::sendRecvChar(), improved overall SoftwareSPI
  code
- Added support for stm32f2 and stm3220g-eval
- Renamed arch/cortexM4_stm32 to arch/cortexM4_stm32f4 for consistency
- Refactored the arch/ directory to avoid code duplication
- Breaking change in the Makefiles
v1.59
- Added arch/cortexM4_stm32 architecture. The current GCC used to build Miosix
  does not yet support the M4 but since the instruction set is backward
  compatible the kernel is currently compiled with -mcpu=cortex-m3. This
  means that floating point operations are still emulated in software, and will
  be fixed when the compiler is upgraded.
- Added a couple of examples, including one using BufferQueue to synchronize
  between a thread and a DMA.
- Added test to testsuite for BufferQueue
- Refactored top level directory, now the testsuite and examples have
  been moved in their directories within the miosix directory
- Improved Queue class
- Added class BufferQueue to simplify the development of double buffered
  data transfers between threads and interrupt routines
- Some const-ness fixes in util
- Extended boot improvements to strive mini board
- Forgot to add util/crc16.cpp to the makefile buid rules
- New target board: Strive. Thanks to Yury Kuchura for contributing the code.
- Improved Thread::join(): when joining a thread, deallocate all its resources
  immeadiately.
- Added tests to testsuite for endianness.h
- Added interfaces/endianness.h with optimized functions to convert to/from
  lille/big endian, as well as byte swapping.
- Improved boot speed by replacing for loops to initialize .data, .bss and
  to initialize the stack of threads with memset/memcpy.
- Improved getMiosixVersion(), new format contains more information, including
  board name, build date and compiler version.
- The files binutils-2.21.tar.bz2 and gdb-7.0.tar.bz2 no longer exist on the
  ftp.gnu.org and mirrors.kernel.org, and this broke the compiler installation
  script. Fixed by downloading binutils-2.21.1 and gdb-7.0.1a.
- Added DCC support for the stm32vldiscovery board, to be able to redirect
  printf through SWD. This has also become the default option for that board.

v1.58
- Added new board stm32vldiscovery
- Fixed a bug in the syscall code to handle static constructors. Despite the
  gcc documentation said that a __guard was 8 bytes, it is actually only 4
- Changing linker scripts to be compatble with the way GCC handles
  .bss with C programs
- Added _times_r in syscalls.cpp to make clock() in time.h work
- Added exception thread safety test to testsuite.
- Added class ExceptionHandlingData that keeps a per-thread data structure
  used to make C++ exceptions thead safe.
- Updated gcc patches, newlib patches and gcc build scripts. Now as far as
  I know, every bit of gcc, newlib and libstdc++ is fully threadsafe, finally!
  (Except the _Reent struct that will be fixed later)
- Fixed a bug in pthread_once(), optimized __cxa_guard_* code.
- Made __register_exitproc() and __call_exitprocs() two new syscalls, to allow
  a future implementation of atexit support.
- Added support for pthread_once, also added new patch to newlib to reduce the
  size of pthread_once_t from 8 bytes to 2 bytes
- Added __cxa_guard_acquire(), __cxa_guard_release() and __cxa_guard_abort()
  to syscalls.cpp. These override the default ones in libstdc++ and provide
  a miosix-aware implementation that can guarantee thread safe initialization
  of static objects. Also, they don't pull in exception support unlike those
  in libstdc++
- Fixed a bug in the control based scheduler that caused sporadic crashes
- Reduced STACK_DEFAULT_FOR_PTHREAD to 2048 bytes, and STACK_MIN to 256 bytes.
- Added tests in testsuite for FastMutex, helped catch one bug
- Refactored code in Mutex and CondotionVariable
- Implement ConditionVariable support for FastMutex
- Breaking change: the Lock and Unlock classes have been templatized to
  work both with Mutex and FastMutex. Existing code Needs to be upgraded
  specifying the template parameter. For example, Lock l(m); becomes
  Lock<Mutex> l(m); or Lock<FastMutex> l(m);
- Added -D_REENT_SMALL flag to CFLAGS_BASE and CXXFLAGS_BASE, otherwise
  #including <reent.h> picks up the wrong version of struct _reent
- Thanks to the patched version of newlib, rewritten pthread mutex and
  condition variable code in a faster way.
- Added new compiler build scripts for gcc-4.5.2, with significantly more
  patching in the newlib area. This is required to implement pthread mutexes
  and condition variables efficiently, as well as to reduce memory footprint.
  As a drawback, the use of the new patched compiler has become mandatory to
  build Miosix.
- Bumped to version 1.58 because from now on the new compiler gcc-4.5.2, and
  especially the new newlib patches become necessary

v1.57
- Added memory barriers to miosix_private::doDisableInterrupts() and
  doEnableInterrupts(), and made fastDisableInterrupts() and
  fastEnableInterrupts() inline, for speed reasons.
- Fixed a bug in Mutex::tryLock(): it would return false in case it was called
  on a recursive mutex locked by the same thread
- Added testsuite tests for new functions/classes
- Added new fastDisableInterrupts(), fastEnableInterrupts() functions and
  FastInterruptDisableLock, FastInterruptEnableLock classes to disable
  interrupts in a fast but not recursive way. Optimized pause and restart
  kernel code, used these new features where appropriate throughout the kernel.
- Fixed a tricky bug in the AuxiliaryTimer implementation for the stm32 arch.
  The prescaler of that timer has a shadow register, and under some timing
  conditions the new prescaler value never made it through the real prescaler,
  resulting in burst values ~700 times less than the value computed by the
  control scheduler. Fixed by forced flush of the prescaler to the shadow
  register.
- Added optional feedforward to control scheduler, defaults to active
  for faster dynamic performance with thread blocking
- Added Scheduler::IRQwaitStatusHook() to inform the scheduler of thread
  blocking
- Added sched_types.h, and separated each *_scheduler.h with an header files
  containing the definition of the SchedData and Priority classes
- Added parameters.h with all control based parameters.

v1.56
- Fixed some bugs in EDF scheduler, found by testsuite.
- Adapted testsuite to work with EDF scheduler.
- Removed configuration option EXIT_ON_HEAP_FULL because since STL containers
  are used in the kernel, there is no more choice: if exceptions are enabled
  on heap full malloc returns NULL and operator new throws bad_alloc, while
  if exceptions are disabled on heap full a reboot is performed, to prevent
  undefined behaviour in STL containers due to operator new not throwing.
- Some code cleanup in the Mutex class.
- Fixed a bug in the priority inheritance mechanism, fixed and added
  a test in the testsuite.
- Removed priority_queue.h and associated test in testsuite.
- Modified Mutex class to use the max heap implementation of the STL.
- Improved preemption points for EDF scheduler.
- Modifed Thread::wakeup(). Now it can no longer be called with the kernel
  paused. Added Thread::PKwakeup() that can be called with the kernel paused.
- Added preemption points in Thread::create(), Thread::setPriority() and
  Thread::wakeup(), active if the EDF scheduler is selected.
- Added file tick_interrupt.h with inline function IRQtickInterrupt() that
  factorizes code for the tick interrupt that was repeated once per target
  architecture.
- Adapted EDF scheduler to use class Priority
- Improved wakeup time in control based scheduler when waking from the idle
  thread.
- Added ControlScheduler::IRQgetIdleThread()
- Changed IRQwakeThreads(). Now it returns a bool.
- Modified control based scheduler for the introduction of the Priority class
- Added Priority class, so that different schedulers can redefine what priority
  means. Changed public interface of Thread class accordingly.
- Started implementing the EDF scheduler, defined three new member functions
  of the Thread class to be able to manage thread deadlines.
- Added Thread::sleepUntil() to make periodic sleeping more accurate.
  Also added a test for it in the testsuite.
- Changed data type for kernel tick from unsigned long long to long long.
  This also required to change the return value of getTick()
- Added files edf_scheduler.h and edf_scheduler.cpp
- Fixed bug in control scheduler: the outer regulator continued increasing
  the burst correction even if the set point could not be attained because of
  saturation of all inner integral regulators. This fix improves regulator
  performance when many threads are blocked.
- Updated openocd config files so that they work with newer releases of
  openocd. Note that this drops compatibility with openocd v0.1.0
- Fixed compiler scripts so that they work on Fedora too.
- Transitioned to git.
- Added the miosix/config/alt-configs directory to store some interesting
  alternative possible configurations.
- Malloc always allocates 4KB sectors that are aligned to 4KB boundaries.
  The linker script on the stm32 architecture has been modified so that the
  main stack (the one used for interrupt handling) is at the beginning of ram
  and not at the end. This will allow malloc to allocate till the ram upper
  limit and not waste the last 4KB block. Unfortunately it's not possible to
  do the same on the lpc2000 because upper 32bytes of ram are used for
  programming the flash memory.
- Changed default value for WITH_STDIN_BUFFER. By default stdin is now buffered.
- As part of a cleanup of linker scripts, some symbols such as _stack_top
  on the stm32 port have been removed.
- Removed filling of stack with a watermark value at boot, on both stm32 and
  lpc2000 architectures, to speed up boot process and for compatibility with
  ongoing linker script optimizations.

v1.55
- Used fixed point arithmethic for internal I regulators instead of simply
  integer arithmethic. This allows the regulator to really reache the set point.
- I+PI scheduler implemented, passes testsuite on both targets.
- Fixed the same bug of AuxiliaryTimer::IRQsetValue(), but in the LPC2000 target
- Fixed AuxiliaryTimer spurious interrupt generation for STM32 if IRQsetValue()
  is called from the SVC interrupt.
- Added ControlScheduler class, started implementing I+PI scheduler.
- Fixed inter dependencies of header files after separation of scheduler from
  kernel
- Added SchedulerData class that collects all data about a thread required by
  a scheduling algorithm. Each Thread instance has a ThreadData instance.
- Thread::getStackBottom() and Thread::getStackSize() are now public,
  so that MemoryProfiling is no longer frien of Thread.
- Added PriorityScheduler class and started moving the hardcoded priority
  scheduler from the kernel to this class.
- Added scheduler.h as an interface to separate the scheduler from the kernel.
- Refactored portableStartKernel to IRQportableStartKernel, since was called
  with interrupts disabled.
- Added miosix/libmiosix.a as dependency of main.elf in the Makefile,
  otherwise changing someting in the kernel required a make clean; make
- Added AuxiliaryTimer class to portability.h, to implement the control based
  scheduler.
- Code refactoring to replace names with function and method names with
  underscores with names in camelcase. Not very useful but improves code
  consistency.

v1.54
- Now sector read and write in the stm32 port retry up to three times before
  giving up, to increase robustness and to fix a bug with large size uSD cards.
- Modified config/Makefile.inc to use the arm-miosix-eabi compiler
- Added compiler scripts to build gcc tailored to miosix
- Changed interface of Thread::detach() and Thread::join(). Now they take
  the thread to detach/join as "this" parameter, for consistency.
- Added -D_POSIX_THREADS to Makefile.inc, so that pthreads.h is available
  in the C standard library.
- Added file miosix/kernel/pthread.cpp
- Added Mutex::PKisLocked() to implement pthread_mutex_destroy()
- Now some pthread functions are friend of Mutex and ConditionVariable, to use
  the PK* private member functions.
- Added ConditionVariable::PKwait() and ConditionVariable::PKisEmpty()
  to implement pthread condition variables.
- Fixed a bug in Thread::isDetached(): it returned the detach status of the
  current thread instead of the status of the thread on which the member
  function was called.
- Added tests to testsuite to check the pthread implementation.

v1.53
- Repleced some more calls to disable_interrupts()/enable_interrupts() and
  pause_kernel()/restart_kernel() with the safer InterruptDisableLock and
  PauseKernelLock.
- Generated doxygen documentation, and fixed some bugs about doxygen tags
  in source files.
- Improved Thread class. Now its constructor and destructor are called
  using the placement new syntax. Before, the class was used even if its
  constructor was never called.
- Implemented Console::write as a call to serial_write instead of
  serial_write_str to reduce the function call depth when printing to the
  console, since it caused stack overflows if printing from threads whose
  stack is STACK_MIN and the code is compiled with -O0 which does not perform
  stack frame optimizations
- Removed serial_write_str as it is no longer used
- Added CTXSAVE_ON_STACK constant to arch_settings.h to take into account
  that some architectures save part of the cotext on the stack.
- Upgraded Thread::create, start_kernel and MemoryProfiling to take int account
  CTXSAVE_ON_STACK
- Added ThreadFlags inner class of Thread to handle thread flags at a higher
  level.
- Added an overload of Thread::create that accepts an entry point function
  that returns a void *, for compatibility with pthreads.
- Added another default parameter to Thread::create, options to set additional
  thread options, such as joinable threads.
- Added Thread::IRQexists(), necessary to implement joinable threads.
- Added DETACHED and WAIT_JOIN flags to ThreadFlags class, and required setter/
  getter.
- Added Thread::detach(), Thread::isDetached() and Thread::join() to add
  support for joinable threads.
- Added test to testsuite for joinable threads.
- Added private constructor and operator= to InterruptDisableLock,
  InterruptEnableLock, PauseKernelLock and RestartKernelLock.
- Added Unlock class to temporarily unlock a Mutex.
- Added kernel/unistd.cpp and implemented sleep() and usleep()
- Moved struct LockedData as a private inner struct of Mutex.
- A bit of refactoring, added delays.h and gpio.h in miosix/interfaces, and
  also added the arch_registers.h interface.
- Added portability.h and bsp.h to interfaces. Now code is more consistent,
  since all calls from kernel code to architecture specific code is done
  through the headers in the interfaces folder.
- Changed name of miosix_private::system_reboot to
  miosix_private::IRQsystem_reboot
- Added ConditionVariable class.
- Added private member functions PKlock() and PKunlock() to Mutex, to allow to
  lock and unlock mutexes with kernel paused, which is necessary to atomically
  unlock the mutex and wait in condition variables.
- Added tests to testsuite for ConditionVariable.
- Increased default value for WATERMARK_LEN from 4 to 16, to help catch
  stack overflows.
- Recently there were a bit too many stack overflows in thread whose stack size
  is STACK_MIN, so STACK_MIN was increased from 256 to 384 bytes.
- Added new Mutex implementation. This one fixes several issues with the
  prevoius implementation regarding priority inheritance, for example this
  new mplementation allows to lock mre mutexes at the same time ans still
  have priority inheritance working, or to change the thread's priority while
  locking a mutex still with no issues.
- Changed signature of Thread::set_priority(). It is now static and therefore
  it is no longer allowed for a thread to change thie priority of another
  thread. This proved of little use, and this change allowed to implement the
  full priority inheritance algorithm.
- Added test to testsuite to check the new priority inheritance algorithm.
- Added Mutex::PKtryLock to prepare for pthreads
- Added Lock::get() and Unlock::get() and removed friends of Lock.
- Fixed doxygen documentation. Excluded arch/ folder because doxygen doesn't
  like the same functions being declared two times in the two architectures.
- Fixed a bug in error_handler since it disabled interrupts even if called
  within an interrupt routine.

v1.52
- added ARM.extab* and ensured 8 byte alignment to linker scripts, as required
  by eabi.
- Added back the check to see if the stack pointer is within bounds at every
  context switch.
- Enabled traps for unaligned memory access and division by zero in the cortex
  m3 port.
- Added a #define to each arch and each board to allow querying this data in
  code with an #ifdef
- Removed Thread::do_terminate(), it was already deprecated in Miosix 1.0x due
  to risk of memory leaks.
- Added Thread::threadLauncher() and modified init_ctxsave() accordingly.
  This new way of spawning threads allows to catch unhandled exceptions
  that propagate through their entry point. Now they are caught in
  threadLauncher() and this avoids undefined behaviour.
- Updated testuite so that it does not use Thread::do_terminate()
- Added test to testsuite to check the correctness of the argv parameter
- Added test to testsuite to check exception propagation through entry point
- Improved debug information for arm7. Now data abort and prefetch abort
  are handled separately from undefined instruction. This makes error
  identification easier and the error address is now precise.
- Added MemoryProfiling class to util to gather detailed memory statistics.
- Make Thread::get_stack_bottom() private because MemoryProfiling is now friend
  of Thread.
- Added test to testsuite for MemoryProfiling
- Optmized system stacks in arm7_lpc2000 port now undef, data abort and prefetch
  abort share the same stack, and irq and svc share the same stack.
- Added prliminary implementation of PriorityQueue
- Added test to testsuite for PriorityQueue
- Optimized PriorityQueue for code size. Looks like recursive inline destructors
  cause much code duplication.
- Now SVC and SysTick interrupts on Cortex M3 have a priority of 3, instead
  of the default value 0.
- Rewritten serial driver. Now serial rx is interrupt based instead of polled,
  while serial tx uses DMA if possible.
- Fixed a bug in the serial driver of the arm7 port where calling
  IRQserial_disable() while a thread was sending data could result in that
  thread blocking.
- Started implementation of SDIO driver for stm32
- Fatorized filesystem mount from bsp_init2() to _main_loader() since it
  must be the same for all architetures
- Fixed a bug in Filesystem::Filesystem which caused fs initialization to
  happen twice. Now the constructor does no longer try to mount the filesystem.
- Inlined Disk::isInitialzed() and Filesystem::isMounted() because it was
  noticed that these functions are called many times during filesystem access.
- Increased stack sizes of threads spawned during filesystem test, from 1.5KB
  to 2.5KB, because they caused stack overflow.
- Added InterruptEnableLock and RestartKernelLock for an additional degree
  of freedom when there is the need to disable interrupts and/or pause the
  kernel.
- Completed SDIO driver for stm32. It implements the Disk interface and allows
  read/write access to an SD card using the hardware peripheral available in
  the stm32.
- Cleaned up the temp directory
- Added readme for stm32 bootloader.
- Renamed this branch from miosix_np_unstable to miosix_np_2 as code is now
  stable in both architectures for quite a while
- Added test to testsuite for checking if stderr works

v1.51
- Implemented interfaces/disk.h which is the interface between the kernel
  part of the filesystem code and the architecture dependent part.
- Changed MAX_OPEN_FILES to 8, since memory for files is dynamically allocated
- Started porting to stm32, modified Makefile.inc
- Porting to stm32, added CMSIS directory
- Porting to stm32, implemented portability.h and portability.cpp
- Porting to stm32, added stage_1_boot and stage_2_boot
- Porting to stm32, new bsp.cpp with only basic functionality
- Porting to stm32, basic polled serial driver in serial.cpp
- Porting to stm32, implemented Console interface using serial driver
- Porting to stm32, added microcontroller_registers.h as interface so that
  miosix.h is independent on the microcontroller type
- Added gpio.h as an architecture-independent way to access gpios
- Added delays.h and delays.cpp to have busy-waiting delays for milliseconds
  and microseconds.
- Added __DSB to interrupt handler where preemption is possible to preserve
  memory consistency
- Added __DMB to eneble_interrupts() and restore_interrupts() to preserve
  memory consistency
- Added printout of unexpected exceptions and the program conuter value when
  the hardware exception happened
- Added additional debug information to unexpected exception handlers, taken
  from Cortex M3 system control block.
- Found how to enable fault handlers, before all fault handlers escalated to
  hardfault.
- Now disable_interrupts() and enable_interrupts() calls can be nested.
- Removed disable_and_save_interrupts() and restore_interrupts() since they
  have been superseded by disable_interrupts() and enable_interrupts()
- Added two new possible errors to the Error enum, PAUSE_KERNEL_NESTING, and 
  DISABLE_INTERRUPTS_NESTING.
- Moved the error_handler() in its own file kernel/error.cpp
- Added RAII class DisableInterruptLock
- Added RAII class PauseKernelLock
- Fctorized stage_2_boot in miosix/kernel. Since the boot process is the same
  for all architectures there is no need to replicate code in arch
- Fixed a bug in Cortex M3 where interrupts were enabled at boot, and added
  a runtime check to make sure it does not happen again.
- Fixed a bug in the testsuite in benchmark_2 where a preemption happening
  in between two function calls would cause deadlock.
- Fixed a bug in the Console implementation for Cortex M3 (serial_read_char())
  where a mutex was not unlocked and caused locking the same mutex multiple
  times. The fix implied using the Lock class instead using lock()/unlock()
- The above bug in Console allowed to discover a long standing bug in the Mutex
  implememtation where locking the same mutex twice did not cause a deadlock,
  and locking the same mutex three times caused memory corruption.
- Added a new possible error to the Error enum, DEADLOCK which fixes the bug
  above.
- Fixed some bugs in the testsuite. For short, if a preemption occurred in some
  places some of the tests would fail. This happened also before, but the
  increased tick frequency of the Cortex port (1000Hz) together with the running
  from RAM (slow nomber of instructions per second) made this more evident.
- Removed __DSB and __DMB from interrupt handlers and disable_interrupts() since
  they are not necessary.
- Factorized disable_interrupts() and enable_interrupts() and
  are_interrupts_enabled() in kernel.h, the nesting counter is implemented only
  one time, and added doDisableInterrupts(), doEnableInterrupts() and
  checkAreInterruptsEnabled() to portability.h to access the hardware.
  Also now disable_interrupts() and enable_interrupts() return immediately
  before the kernel is started. Lastly, if the nesting reaches the limit
  error_handler(NESTING_OVERFLOW) is called.
- Added doYield() to portability.h as a proper solution to the arch-dependant
  implementation of Thread::yield().
- Cleaned up some code using DisableInterruptsLock and PauseKernelLock.
- Testsuite is now running continuously for more than an hour on both
  architectures and no fault occurred.

v1.50
- Bumped version to 1.50. This is the unstable version. After all changes will
  be done the version will be bumped again to 2.00.
- Removed notice saying this changelog was only for the kernel. There is no
  longer separation from kernel and drivers for quite some time.
- Changed directory structure to the new one to allow multiple archithectures
  and schedulers.
- Changed makefiles. The new ones do not contain architecture dependent details
  except for Makefile.inc where it is possible to select the target architecture
  and board.
- Added files util/version.h and util/version.cpp. They contain a function
  to get the kernel version string.
- Modified syscalls.cpp, added __cxa_pure_virtual in case exceptions are
  disabled, and added #ifdef EXIT_ON_HEAP_FULL to select behaviour on heap
  overflow.
- Removed WITH_NONSTANDARD_ALLOC option in kernel_settings.h, it was broken and
  useless.
- Removed WITH_TICK_HOOK option in kernel_settings.h.
- Removed WITH_CPU_METER option in kernel_settings.h since cpu load monitor
  won't work with some scheduling algorithm.
- Removed kernel_settings.h and merged its content in miosix_settings.h
- Removed WITH_INIT_CALLBACKS option in kernel_settings.h. Initialization is
  now done in the bsp or in main().
- Removed WITH_ERROR_HANDLER option from kernel_settings.h since it wasn't
  really supported.
- Added -D_MIOSIX to the makefiles (and removed it from miosix.h) so that user
  code can do a #ifdef _MIOSIX to see if the OS is Miosix.
- Split configuration options in three file: config/miosix_settings.h for the
  architecture independent options, arch/<arch name>/common/arch_settings.h
  for options that depend on the architecture, and
  arch/<arch name>/<board name>/board_settings.h for options that depend on the
  board.
- Added Console interface to decouple the kernel from its underlying
  implementation.
- Added file kernel/logging.h with inline functions to print boot logs and
  error logs only if they are enabled in config/miosix_settings.h
- Added Filesystem class which wraps filesystem access. It is supposed to be
  an interface between the C/C++ standrd library's syscalls and the FatFs
  library.
- Removed fs_mutex, mount_filesystem(), umount_filesystem() and
  is_filesystem_mounted(). These functions are now in the Filesystem class.
- Implemented _kill() syscall. Since in Miosix there is only one process
  calling it causes a reboot.
- Added new option to miosix_settings.h: SYNC_AFTER_WRITE to let the user choose
  safe or fast filesystem write access.

v1.03
- Added #ifdef __NO_EXCEPTIONS around operator new/delete in syscalls.cpp, and
  added -D__NO_EXCEPTIONS in Makefile.inc. In this way if compiling with
  exception support operator new/delete are not redefined and throw
  std::bad_alloc as expected.
- Added -ffunction-sections to Makefile.inc to optimize code size

v1.02
- Centralized compiling options in Makefile.inc. This makes easy changing
  optimization flags, and switchin between arm-elf-gcc and arm-none-eabi-gcc
- Fixed C++ code in naked functions bug that prevented the kernel from being
  compiled with CodeSorcery
- Added -Wl,--start-group and -Wl,--end-group around system libraries in the
  Makefile, to fix a problem with Codesourcery GCC
- Redefined __verbose_terminate_handler to reduce code size and avoid some
  problems with uncaught exceptions
- Updated linker script and startup assembler file.
- Added Lock class in sync.h to allow locking a mutex in an exception safe way
- Added JTAG_DISABLE_SLEEP #define to allow disbling sleep mode in idle thread
  otherwise JTAG debuggers lose communication with the device.
- Method do_terminate() in the Thread class is now deprecated because it can
  cause memory leaks.

v1.01
- Added _getpid_r and _kill_r functions to syscalls.cpp because they seem
  required when compiling with GNUARM compiler on windows.
- Added bug report on Thread::set_priority() to documentation.
- Exception support is now enabled by default

v1.00
- This will be the first public release, so that's why the version number jumped
  from v0.34 to v1.00. Doing a lot of refactoring to make code easier to read.
- Changed implementation of Thread::terminate(), now it disables interrupts
  instead of pausing the kernel to avoid race condition in a read-modify-write
  operation.
- In Thread::create() stacksize must be divisible by 4. Added a comment and a
  check in the code that rounds the number if it is not divisible by 4.
- Thread::wait() and Thread::IRQwait() are now static, so that a thread cannot
  put another thread in wait status.
- Refactoring: merged RTOS and miosix namespaces. New name is miosix.
  Renamed namespace RTOS_portable. New name is miosix_private.
  Renamed RTOS_IRQ_Routine() and RTOS_SWI_routine(). New name is kernel_...
  "RTOS" folder renamed to "kernel", rtos.cpp and rtos.h rtos_settings.h
  renamed kernel.cpp, kernel.h and kernel_settings.h
- Added default parameters to Thread::create() now default priority is 1 and
  default argv is NULL
- Refactoring: renamed Process class, new name is Thread. Also renamed methods,
  variables containig the word "process" examples are:
  IRQfind_next_process() > IRQfind_next_thread() process_list > thread_list...
- Added method try_lock() to class Mutex
- Refactoring: renamed method Mutex::enter() to Mutex::lock() and Mutex::leave()
  to Mutex::unlock() for more consistency with other threading libraries (boost)
- The kernel tick is now an unsigned long long (64bit integer), while before it
  was a 32bit integer. This allows not worryinng about tick overflow.
  the function get_tick() was therefore changed to return an unsigned long long.
- The list of sleeping threads is now sorted so that there is no need to scan
  it all at every tick to improve performance.
- Modified makefile, it no longer makes libmiosix_rtos.a, since was useless in
  most cases. The part of makefile that created it are simply commented out.
- Added IRQreset() method to Queue class, to allow resetting a queue from inside
  interrupts.
- Removed serial_init() and serial_disable() from Serial.cpp, and added
  IRQserial_init() and IRQserial_disable(). Now serial port needs interrupts
  disabled to be turned on/off.

v0.34
- Added disable_and_save_interrupts() and restore_interrupts() in portability.h
  to allow writing code that need interrupts disabled to work both when
  interrupts are already disabled and when interrupts are enabled.
- Modified pause_kernel() and restart_kernel(). These functions now disable
  interrupts (with disable_and_save_interrupts()) before incrementing/
  decrementing kernel_running variable, because increment may not be an atomic
  operation and may cause race condition.
- kernel_running is now no longer declared volatile, since it is only modified
  when interrupts are disabled.
- Added information about the maximum sleep time as a comment to Process::sleep
- Added is_kernel_running() in rtos.cpp
- Added are_interrupts_enabled() in portability.cpp

v0.33
- Now priority is always represented by a "short int" instead of an
  "unsigned char". This is because the idle process' priority is -1. This
  standardized priority system fixes a bug in Queue::IRQget(T, bool&) and
  Queue::IRQput(T, bool&) to allow implementing context switch inside a driver
  interrupt.
- system_reboot() in namespace RTOS_portable is now extern "C" to allow using
  it inside IRQ easily
- Added PCONP explicit peripheral enable in Portability.cpp, Serial.cpp and
  filesystem driver, to allow ondemand peripheral enable strategy.
- Added get_stack_bottom() to process class.

v0.32
- Fixed a possible cause of deadlock in Mutex::enter()
- Fixed bug in Process::sleep(). Now if the kernel tick overflows, it
  causes no problems.
- get_tick() moved out of class Process. It is now a function and not a method,
  since it was unrelated with Process class.
- Wow, no more FIXME in the kernel code ;)

v0.31
- Added again atomic_swap(), because it can be used for some device driver.
- Added Process::get_tick() to allow implementation of timer class.
- Added Timer class, to measure time intervals.
- Changed IRQfind_next_process from
  if(process_list[i]==NULL) continue;
  temp=process_list[i];
  for(;;)
  [...]
  process_list[i]=temp->next;
  [...]
  if(temp==process_list[i]) break;
  to
  if(process_list[i]==NULL) continue;
  temp=process_list[i]->next;
  for(;;)
  [...]
  process_list[i]=temp;
  [...]
  if(temp==process_list[i]->next) break;
  to fix an undesired behaviour of Process::yield() (discovered in testsuite)
- Added error_handler(UNEXPECTED); after Process::yield(); in
  Process::do_terminate.
- Added volatile to kernel_running because pause_kernel and restart_kernel can
  be called from different processes
- In Queue class, added IRQwake_waiting_process() at the end of the while in
  put(), get(), wait_until_not_full(), wait_until not_empty() methods to fix a
  cause of deadlock (discovered in test_8 of testsuite)
- Added some compiler flag to RTOS makefile to improve performance
- Testsuite now ready

v0.30
- Modified interface and implementation of Queue class
- Removed RTOS::Process::kill() and RTOS::remove_from_sleeping_list, since
  those functions can cause system crash
- Removed SleepLock and Mutex classes, and renamed PhMutex class in Mutex class.
  Reason: no time to test all those classes, better concentrate on ONE Mutex
  class and try to test it to avoid bugs.
- Added a check in Process::sleep() since if the sleep time was lower than the
  tick resolution, that might cause deadlock. Now the behaviour in this
  condition is defined, and written as a comment to the Process::sleep method.
- Added two more methods to the Queue class, wait_until_queue_not_full() and
  wait_until_queue_not_empty() to allow implementing device drivers where
  interaction between a software and an hardware queue is required.
- Reorganized code in portability.h and portability.cpp. Now some functions
  and macros are no longer "private". This will allow context switch inside
  interrupt based device drivers.
- Fixed bug in cpu meter when using IRQ based device drivers
- Reorganized code in rtos.h and rtos.cpp. Now functions that must be called
  inside an IRQ, even if "private" are prefixed with IRQ, and
  IRQfind_next_process() is now "public" (declared in rtos.h) to allow context
  switch inside interrupt based device drivers.
- Removed atomic_swap from portability.h and portability.cpp because useless.
- Temporarily fixed pointer aliasing problem.
- Added Process::exists in Process class, to see if a process is running or
  has been deleted.

No changelog was kept prior to v0.30.
