diff -ruN newlib-1.19.0-original/newlib/libc/include/pthread.h newlib-1.19.0/newlib/libc/include/pthread.h
--- newlib-1.19.0-original/newlib/libc/include/pthread.h	2011-04-22 19:32:40.267583001 +0200
+++ newlib-1.19.0/newlib/libc/include/pthread.h	2011-05-30 10:35:06.702193942 +0200
@@ -68,7 +68,10 @@
     pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER;
  */
 
-#define PTHREAD_MUTEX_INITIALIZER  ((pthread_mutex_t) 0xFFFFFFFF)
+/* begin TFT patch */
+#define PTHREAD_MUTEX_INITIALIZER {0,0,0,-1}
+#define PTHREAD_MUTEX_RECURSIVE_INITIALIZER_NP {0,0,0,0}
+/* end TFT patch */
 
 /*  Locking and Unlocking a Mutex, P1003.1c/Draft 10, p. 93
     NOTE: P1003.4b/D8 adds pthread_mutex_timedlock(), p. 29 */
@@ -104,7 +107,9 @@
     pthread_cond_t cond = PTHREAD_COND_INITIALIZER;
  */
  
-#define PTHREAD_COND_INITIALIZER  ((pthread_mutex_t) 0xFFFFFFFF)
+/* begin TFT patch */
+#define PTHREAD_COND_INITIALIZER {0,0}
+/* end TFT patch */
  
 /* Broadcasting and Signaling a Condition, P1003.1c/Draft 10, p. 101 */
  
diff -ruN newlib-1.19.0-original/newlib/libc/include/stdio.h newlib-1.19.0/newlib/libc/include/stdio.h
--- newlib-1.19.0-original/newlib/libc/include/stdio.h	2011-04-22 19:32:40.238583002 +0200
+++ newlib-1.19.0/newlib/libc/include/stdio.h	2011-05-30 10:35:06.757193833 +0200
@@ -104,8 +104,10 @@
 
 #ifdef __BUFSIZ__
 #define	BUFSIZ		__BUFSIZ__
+#warning "By TFT: BUFSIZ is being redefined to something other than 512Bytes"
 #else
-#define	BUFSIZ		1024
+/* By TFT: 1024 is too big for small microcontrollers, so changed to 512 */
+#define	BUFSIZ		512
 #endif
 
 #ifdef __FOPEN_MAX__
diff -ruN newlib-1.19.0-original/newlib/libc/include/sys/features.h newlib-1.19.0/newlib/libc/include/sys/features.h
--- newlib-1.19.0-original/newlib/libc/include/sys/features.h	2011-04-22 19:32:40.261583001 +0200
+++ newlib-1.19.0/newlib/libc/include/sys/features.h	2011-05-30 10:35:06.757193833 +0200
@@ -25,6 +25,11 @@
 extern "C" {
 #endif
 
+/* Begin TFT patch */
+#define _POSIX_THREADS 1
+#define _UNIX98_THREAD_MUTEX_ATTRIBUTES 1
+/* End TFT patch */
+
 /* RTEMS adheres to POSIX -- 1003.1b with some features from annexes.  */
 
 #ifdef __rtems__
diff -ruN newlib-1.19.0-original/newlib/libc/include/sys/lock.h newlib-1.19.0/newlib/libc/include/sys/lock.h
--- newlib-1.19.0-original/newlib/libc/include/sys/lock.h	2011-04-22 19:32:40.259583001 +0200
+++ newlib-1.19.0/newlib/libc/include/sys/lock.h	2011-05-30 10:35:06.758193838 +0200
@@ -1,24 +1,57 @@
 #ifndef __SYS_LOCK_H__
 #define __SYS_LOCK_H__
-
-/* dummy lock routines for single-threaded aps */
-
-typedef int _LOCK_T;
-typedef int _LOCK_RECURSIVE_T;
  
 #include <_ansi.h>
 
-#define __LOCK_INIT(class,lock) static int lock = 0;
-#define __LOCK_INIT_RECURSIVE(class,lock) static int lock = 0;
-#define __lock_init(lock) (_CAST_VOID 0)
-#define __lock_init_recursive(lock) (_CAST_VOID 0)
-#define __lock_close(lock) (_CAST_VOID 0)
-#define __lock_close_recursive(lock) (_CAST_VOID 0)
-#define __lock_acquire(lock) (_CAST_VOID 0)
-#define __lock_acquire_recursive(lock) (_CAST_VOID 0)
-#define __lock_try_acquire(lock) (_CAST_VOID 0)
-#define __lock_try_acquire_recursive(lock) (_CAST_VOID 0)
-#define __lock_release(lock) (_CAST_VOID 0)
-#define __lock_release_recursive(lock) (_CAST_VOID 0)
+//begin TFT patch: adding real locks to stdio
+
+/*
+ * The type of pthread_mutex_t, has been moved here from sys/types.h, because
+ * sys/types.h #includes sys/_types.h which in turn #includes sys/lock.h,
+ * and sys/lock.h actually needs to know the type of pthread_mutex_t.
+ * Unfortunately simply adding an #include sys/types.h into sys/lock.h didn't
+ * work because it caused a cyclic dependency between headers
+ */
+
+struct WaitingList
+{
+    void *thread; //Actually, a Thread * but C doesn't know about C++ classes
+    struct WaitingList *next;
+};
+
+typedef struct
+{
+    void *owner; //Actually, a Thread * but C doesn't know about C++ classes
+    struct WaitingList *first;
+    struct WaitingList *last;
+    int recursive; // -1 = special value for non recursive
+} pthread_mutex_t;
+
+//
+// Finished declaring pthread stuff, now starting real content of lock.h
+//
+
+typedef pthread_mutex_t _LOCK_T;
+typedef pthread_mutex_t _LOCK_RECURSIVE_T;
+
+#define __LOCK_INIT(clazz,lock) clazz pthread_mutex_t lock = {0,0,0,-1}
+#define __LOCK_INIT_RECURSIVE(clazz,lock) clazz pthread_mutex_t lock = {0,0,0,0}
+#define __lock_init(lock) pthread_mutex_init(&lock,NULL) 
+#define __lock_init_recursive(lock) \
+do { \
+    lock.owner=0; \
+    lock.first=0; \
+    lock.last=0; \
+    lock.recursive=0; \
+} while(0)
+#define __lock_close(lock) pthread_mutex_destroy(&lock)
+#define __lock_close_recursive(lock) pthread_mutex_destroy(&lock)
+#define __lock_acquire(lock) pthread_mutex_lock(&lock)
+#define __lock_acquire_recursive(lock) pthread_mutex_lock(&lock)
+#define __lock_try_acquire(lock) pthread_mutex_trylock(&lock)
+#define __lock_try_acquire_recursive(lock) pthread_mutex_trylock(&lock)
+#define __lock_release(lock) pthread_mutex_unlock(&lock)
+#define __lock_release_recursive(lock) pthread_mutex_unlock(&lock)
+//end TFT patch
 
 #endif /* __SYS_LOCK_H__ */
diff -ruN newlib-1.19.0-original/newlib/libc/include/sys/reent.h newlib-1.19.0/newlib/libc/include/sys/reent.h
--- newlib-1.19.0-original/newlib/libc/include/sys/reent.h	2011-04-22 19:32:40.255583001 +0200
+++ newlib-1.19.0/newlib/libc/include/sys/reent.h	2011-05-30 10:35:06.758193838 +0200
@@ -393,8 +393,12 @@
   void (**(_sig_func))(int);
 
   /* atexit stuff */
-  struct _atexit *_atexit;
-  struct _atexit _atexit0;
+  /*
+   * begin TFT patch: atexit moved out of reentrancy structure
+   * struct _atexit *_atexit;
+   * struct _atexit _atexit0;
+   * end TFT patch
+   */
 
   struct _glue __sglue;			/* root of glue chain */
   __FILE *__sf;			        /* file descriptors */
@@ -425,8 +429,8 @@
     _NULL, \
     _NULL, \
     _NULL, \
-    _NULL, \
-    {_NULL, 0, {_NULL}, _NULL}, \
+    /*_NULL,*/ \
+    /*{_NULL, 0, {_NULL}, _NULL},*/ \
     {_NULL, 0, _NULL}, \
     _NULL, \
     _NULL, \
@@ -452,11 +456,11 @@
     (var)->_localtime_buf = _NULL; \
     (var)->_asctime_buf = _NULL; \
     (var)->_sig_func = _NULL; \
-    (var)->_atexit = _NULL; \
-    (var)->_atexit0._next = _NULL; \
-    (var)->_atexit0._ind = 0; \
-    (var)->_atexit0._fns[0] = _NULL; \
-    (var)->_atexit0._on_exit_args_ptr = _NULL; \
+    /*(var)->_atexit = _NULL;*/ \
+    /*(var)->_atexit0._next = _NULL;*/ \
+    /*(var)->_atexit0._ind = 0;*/ \
+    /*(var)->_atexit0._fns[0] = _NULL;*/ \
+    /*(var)->_atexit0._on_exit_args_ptr = _NULL;*/ \
     (var)->__sglue._next = _NULL; \
     (var)->__sglue._niobs = 0; \
     (var)->__sglue._iobs = _NULL; \
diff -ruN newlib-1.19.0-original/newlib/libc/include/sys/types.h newlib-1.19.0/newlib/libc/include/sys/types.h
--- newlib-1.19.0-original/newlib/libc/include/sys/types.h	2011-04-22 19:32:40.251583004 +0200
+++ newlib-1.19.0/newlib/libc/include/sys/types.h	2011-05-30 10:35:06.759193847 +0200
@@ -300,7 +300,11 @@
 #define PTHREAD_CREATE_DETACHED 0
 #define PTHREAD_CREATE_JOINABLE  1
 
-#if defined(__XMK__) || defined(__rtems__)
+/*
+ * begin TFT patch
+ * #if defined(__XMK__) || defined(__rtems__)
+ * end TFT patch
+ */
 /* The following defines are part of the X/Open System Interface (XSI). */
 
 /* This type of mutex does not detect deadlock. A thread attempting to relock this mutex without first unlocking 
@@ -331,7 +335,11 @@
  */
 #define PTHREAD_MUTEX_DEFAULT  4 
 
-#endif /* defined(__XMK__) || defined(__rtems__) */
+/*
+ * begin TFT patch
+ * #endif defined(__XMK__) || defined(__rtems__)
+ * end TFT patch
+ */
 
 #if defined(__XMK__)
 typedef struct pthread_attr_s {
@@ -405,8 +413,17 @@
 } pthread_mutexattr_t;
 
 #else /* !defined(__XMK__) */
-typedef __uint32_t pthread_mutex_t;      /* identify a mutex */
-
+/*
+ * begin TFT patch
+ * The definition of pthread_mutex_t:
+ * - has been changed from a simple int to a struct containing the actual mutex
+ *   implementation for speed reasons.
+ * - has been moved to sys/lock.h because leaving it here and #including sys/types.h
+ *   in sys/lock.h would have caused a cycle of #includes
+ * typedef __uint32_t pthread_mutex_t;
+ * end TFT patch
+ */
+ 
 typedef struct {
   int   is_initialized;
 #if defined(_POSIX_THREAD_PROCESS_SHARED)
@@ -425,7 +442,21 @@
 
 /* Condition Variables */
 
-typedef __uint32_t pthread_cond_t;       /* identify a condition variable */
+/*
+ * begin TFT patch
+ * The definition of pthread_cond_t has been changed from a simple int to a
+ * struct containing the actual mutex implementation for speed reasons.
+ * Note: the definition of struct WaitingList is in sys/lock.h
+ * typedef __uint32_t pthread_cond_t;
+ */
+struct WaitingList;
+
+typedef struct
+{
+    struct WaitingList *first;
+    struct WaitingList *last;
+} pthread_cond_t;
+/* end TFT patch */
 
 typedef struct {
   int   is_initialized;
@@ -438,10 +469,12 @@
 
 typedef __uint32_t pthread_key_t;        /* thread-specific data keys */
 
+/* begin TFT patch: changing int with char, just to save a couple of bytes in RAM */
 typedef struct {
-  int   is_initialized;  /* is this structure initialized? */
-  int   init_executed;   /* has the initialization routine been run? */
+  char   is_initialized;  /* is this structure initialized? */
+  char   init_executed;   /* has the initialization routine been run? */
 } pthread_once_t;       /* dynamic package initialization */
+/* end TFT patch */
 #else
 #if defined (__CYGWIN__)
 #include <cygwin/types.h>
diff -ruN newlib-1.19.0-original/newlib/libc/reent/reent.c newlib-1.19.0/newlib/libc/reent/reent.c
--- newlib-1.19.0-original/newlib/libc/reent/reent.c	2011-04-22 19:32:39.673583001 +0200
+++ newlib-1.19.0/newlib/libc/reent/reent.c	2011-05-30 10:35:06.759193847 +0200
@@ -87,8 +87,11 @@
 	_free_r (ptr, ptr->_localtime_buf);
       if (ptr->_asctime_buf)
 	_free_r (ptr, ptr->_asctime_buf);
-      if (ptr->_atexit && ptr->_atexit->_on_exit_args_ptr)
-	_free_r (ptr, ptr->_atexit->_on_exit_args_ptr);
+	/* begin TFT patch: atexit moved out of reentrancy structure
+     * if (ptr->_atexit && ptr->_atexit->_on_exit_args_ptr)
+	 * _free_r (ptr, ptr->_atexit->_on_exit_args_ptr);
+	 * end TFT patch
+	 */
 #else
       /* atexit stuff */
       if ((ptr->_atexit) && (ptr->_atexit != &ptr->_atexit0))
@@ -131,21 +134,25 @@
 void
 _DEFUN (_wrapup_reent, (ptr), struct _reent *ptr)
 {
-  register struct _atexit *p;
-  register int n;
-
-  if (ptr == NULL)
-    ptr = _REENT;
-
-#ifdef _REENT_SMALL
-  for (p = ptr->_atexit, n = p ? p->_ind : 0; --n >= 0;)
-    (*p->_fns[n]) ();
-#else
-  for (p = ptr->_atexit; p; p = p->_next)
-    for (n = p->_ind; --n >= 0;)
-      (*p->_fns[n]) ();
-#endif
-  if (ptr->__cleanup)
-    (*ptr->__cleanup) (ptr);
+/*
+ * begin TFT patch: atexit moved out of reentrancy structure
+ *  register struct _atexit *p;
+ * register int n;
+ *
+ * if (ptr == NULL)
+ *   ptr = _REENT;
+ *
+ * #ifdef _REENT_SMALL
+ * for (p = ptr->_atexit, n = p ? p->_ind : 0; --n >= 0;)
+ *   (*p->_fns[n]) ();
+ * #else
+ * for (p = ptr->_atexit; p; p = p->_next)
+ *   for (n = p->_ind; --n >= 0;)
+ *     (*p->_fns[n]) ();
+ * #endif
+ * if (ptr->__cleanup)
+ *   (*ptr->__cleanup) (ptr);
+ * end TFT patch
+ */
 }
 
diff -ruN newlib-1.19.0-original/newlib/libc/stdlib/abort.c newlib-1.19.0/newlib/libc/stdlib/abort.c
--- newlib-1.19.0-original/newlib/libc/stdlib/abort.c	2011-04-22 19:32:44.797583001 +0200
+++ newlib-1.19.0/newlib/libc/stdlib/abort.c	2011-05-31 16:10:05.213837322 +0200
@@ -59,7 +59,8 @@
 
   while (1)
     {
-      raise (SIGABRT);
+      //Patch by TFT: Miosix doesn't have sigals, removing this reduces code size 
+      //raise (SIGABRT);
       _exit (1);
     }
 }
diff -ruN newlib-1.19.0-original/newlib/libc/stdlib/__atexit.c newlib-1.19.0/newlib/libc/stdlib/__atexit.c
--- newlib-1.19.0-original/newlib/libc/stdlib/__atexit.c	2011-04-22 19:32:44.697583002 +0200
+++ newlib-1.19.0/newlib/libc/stdlib/__atexit.c	2011-05-30 10:35:06.760193853 +0200
@@ -8,92 +8,10 @@
 #include <sys/lock.h>
 #include "atexit.h"
 
-/* Make this a weak reference to avoid pulling in malloc.  */
-void * malloc(size_t) _ATTRIBUTE((__weak__));
-__LOCK_INIT_RECURSIVE(, __atexit_lock);
-
 /*
  * Register a function to be performed at exit or on shared library unload.
  */
 
-int
-_DEFUN (__register_exitproc,
-	(type, fn, arg, d),
-	int type _AND
-	void (*fn) (void) _AND
-	void *arg _AND
-	void *d)
-{
-  struct _on_exit_args * args;
-  register struct _atexit *p;
-
-#ifndef __SINGLE_THREAD__
-  __lock_acquire_recursive(__atexit_lock);
-#endif
-
-  p = _GLOBAL_REENT->_atexit;
-  if (p == NULL)
-    _GLOBAL_REENT->_atexit = p = &_GLOBAL_REENT->_atexit0;
-  if (p->_ind >= _ATEXIT_SIZE)
-    {
-#ifndef _ATEXIT_DYNAMIC_ALLOC
-      return -1;
-#else
-      /* Don't dynamically allocate the atexit array if malloc is not
-	 available.  */
-      if (!malloc)
-	return -1;
-
-      p = (struct _atexit *) malloc (sizeof *p);
-      if (p == NULL)
-	{
-#ifndef __SINGLE_THREAD__
-	  __lock_release_recursive(__atexit_lock);
-#endif
-	  return -1;
-	}
-      p->_ind = 0;
-      p->_next = _GLOBAL_REENT->_atexit;
-      _GLOBAL_REENT->_atexit = p;
-#ifndef _REENT_SMALL
-      p->_on_exit_args._fntypes = 0;
-      p->_on_exit_args._is_cxa = 0;
-#endif
-#endif
-    }
-
-  if (type != __et_atexit)
-    {
-#ifdef _REENT_SMALL
-      args = p->_on_exit_args_ptr;
-      if (args == NULL)
-	{
-	  if (malloc)
-	    args = malloc (sizeof * p->_on_exit_args_ptr);
-
-	  if (args == NULL)
-	    {
-#ifndef __SINGLE_THREAD__
-	      __lock_release(lock);
-#endif
-	      return -1;
-	    }
-	  args->_fntypes = 0;
-	  args->_is_cxa = 0;
-	  p->_on_exit_args_ptr = args;
-	}
-#else
-      args = &p->_on_exit_args;
-#endif
-      args->_fnargs[p->_ind] = arg;
-      args->_fntypes |= (1 << p->_ind);
-      args->_dso_handle[p->_ind] = d;
-      if (type == __et_cxa)
-	args->_is_cxa |= (1 << p->_ind);
-    }
-  p->_fns[p->_ind++] = fn;
-#ifndef __SINGLE_THREAD__
-  __lock_release_recursive(__atexit_lock);
-#endif
-  return 0;
-}
+// TFT patch: function __register_exitproc is now a Miosix syscall
+// to make it possible to compile the kernel both with and without
+// atexit support
diff -ruN newlib-1.19.0-original/newlib/libc/stdlib/__call_atexit.c newlib-1.19.0/newlib/libc/stdlib/__call_atexit.c
--- newlib-1.19.0-original/newlib/libc/stdlib/__call_atexit.c	2011-04-22 19:32:44.827582998 +0200
+++ newlib-1.19.0/newlib/libc/stdlib/__call_atexit.c	2011-05-30 10:35:06.776193890 +0200
@@ -11,10 +11,6 @@
 /* Make this a weak reference to avoid pulling in free.  */
 void free(void *) _ATTRIBUTE((__weak__));
 
-#ifndef __SINGLE_THREAD__
-extern _LOCK_RECURSIVE_T __atexit_lock;
-#endif
-
 #ifdef _WANT_REGISTER_FINI
 
 /* If "__libc_fini" is defined, finalizers (either
@@ -60,102 +56,6 @@
  * otherwise only the handlers from that DSO are called.
  */
 
-void 
-_DEFUN (__call_exitprocs, (code, d),
-	int code _AND _PTR d)
-{
-  register struct _atexit *p;
-  struct _atexit **lastp;
-  register struct _on_exit_args * args;
-  register int n;
-  int i;
-  void (*fn) (void);
-
-
-#ifndef __SINGLE_THREAD__
-  __lock_acquire_recursive(__atexit_lock);
-#endif
-
- restart:
-
-  p = _GLOBAL_REENT->_atexit;
-  lastp = &_GLOBAL_REENT->_atexit;
-  while (p)
-    {
-#ifdef _REENT_SMALL
-      args = p->_on_exit_args_ptr;
-#else
-      args = &p->_on_exit_args;
-#endif
-      for (n = p->_ind - 1; n >= 0; n--)
-	{
-	  int ind;
-
-	  i = 1 << n;
-
-	  /* Skip functions not from this dso.  */
-	  if (d && (!args || args->_dso_handle[n] != d))
-	    continue;
-
-	  /* Remove the function now to protect against the
-	     function calling exit recursively.  */
-	  fn = p->_fns[n];
-	  if (n == p->_ind - 1)
-	    p->_ind--;
-	  else
-	    p->_fns[n] = NULL;
-
-	  /* Skip functions that have already been called.  */
-	  if (!fn)
-	    continue;
-
-	  ind = p->_ind;
-
-	  /* Call the function.  */
-	  if (!args || (args->_fntypes & i) == 0)
-	    fn ();
-	  else if ((args->_is_cxa & i) == 0)
-	    (*((void (*)(int, _PTR)) fn))(code, args->_fnargs[n]);
-	  else
-	    (*((void (*)(_PTR)) fn))(args->_fnargs[n]);
-
-	  /* The function we called call atexit and registered another
-	     function (or functions).  Call these new functions before
-	     continuing with the already registered functions.  */
-	  if (ind != p->_ind || *lastp != p)
-	    goto restart;
-	}
-
-#ifndef _ATEXIT_DYNAMIC_ALLOC
-      break;
-#else
-      /* Don't dynamically free the atexit array if free is not
-	 available.  */
-      if (!free)
-	break;
-
-      /* Move to the next block.  Free empty blocks except the last one,
-	 which is part of _GLOBAL_REENT.  */
-      if (p->_ind == 0 && p->_next)
-	{
-	  /* Remove empty block from the list.  */
-	  *lastp = p->_next;
-#ifdef _REENT_SMALL
-	  if (args)
-	    free (args);
-#endif
-	  free (p);
-	  p = *lastp;
-	}
-      else
-	{
-	  lastp = &p->_next;
-	  p = p->_next;
-	}
-#endif
-    }
-#ifndef __SINGLE_THREAD__
-  __lock_release_recursive(__atexit_lock);
-#endif
-
-}
+// TFT patch: function __call_exitprocs is now a Miosix syscall
+// to make it possible to compile the kernel both with and without
+// atexit support
