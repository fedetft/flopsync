Rationale for gcc patch
-----------------------

This patch does the following:

1) It modifies gcc/config/arm/t-arm-elf to enable multilibs for the thumb2
   instruction set which are disabled by default. This is required to build
   code for Cortex M3.

2) It modifies gcc/configure and gcc/configure.ac to accept the parameter
   --enable-threads=miosix

3) It modifies gcc/config.gcc to set the internal variable enable_threads
   within gcc to "miosix". Without this modification, arm-miosix-eabi-gcc -v
   would report "Thread model: single" and likely generate thread unsafe code

4) It adds the gcc/gthr-miosix.h specifying the miosix thread model, basically
   telling the compiler that threadsafe code is required and pointing it to
   the routines it needs to do so (standard posix routines). Also gcc/gthr.h
   has been modified to include gthr-miosix.h, and libstdc++/include/Makefile.in
   and libstdc++/include/Makefile.am have been modified accordingly to support
   the new gthr-miosix.h file.

5) Given that Miosix does not have a thread local storage API, but it is
   required in a couple of places related to C++ exception handling
   (that is, gcc/unwind-sjlj.c and libsupc++/eh_globals.cc), those files have
   been modified removing functions to get/set the thread-local variables.
   Those functions are now implemented within Miosix, in kernel/syscalls.cpp

6) The thread safe initialization of C++ static objects can be implemented
   more efficiently using the Miosix API rather than the POSIX one, so the
   functions __cxa_guard_[acquire|release|abort] have been removed from
   libsupc++/guard.cc and implemented in miosix/kernel/syscalls.cpp

7) Added libstdc++/config/cpu/arm/atomicity.h and
   libstdc++/config/cpu/arm/atomic_word.h To enable support for atomic add and
   exchange_and_add. Given that there aren't opcodes for these in both ARM7 and
   Cortex M3, they were implemented by temporarily disabling interrupts.

8) It reduces the size of the emergency buffer in
   libstdc++-v3/libsupc++/eh_alloc.cc, which is used for allocating the
   std::bad_alloc exception that operator new should throw when the heap is
   full. By default it is set to a conservative value that is too large when
   compared with the RAM size of microcontrollers.

9) It adds __attribute__((weak)) to some functions that pull in exception
   support to make them overridable by miosix when compiling without exceptions
   to minimize code size

-------------------------------------------------------------------------------

Calculations to minimize the emrgency buffer for throwing std::bad_alloc.

Defintion of __cxa_exception, the exception header
Looks like it's 12 pointers or ints, so 48bytes, but a comment in eh_alloc.cc
Says it can be 13 pointers and 2 ints, so 60bytes

4) it is recomended to leave some space just in case a different
exception is thrown, like logic_error or runtime_error and there is no heap to
allocate it. By seeing stdecept and stdexcept.cc these classes only
contain a string object, and sizeof(logic_error) returns 8 bytes (4=vptr 4=string)

5) An attempt at using 64bytes failed.

6) Note Jul 5, 2010.
A testcase started to fail, JTAG debugging found that a bad_alloc was allocated
that required 132Bytes. Expanding EMERGENCY_OBJ_SIZE to 160 bytes (128+32) to leave
some margin.

Conclusion:
Looks like EMERGENCY_OBJ_SIZE can be shrinked from 512 to 160bytes, for 32bit systems.
For EMRGENCY_OBJ_COUNT, 3 is good.
