Rationale for newlib patch
--------------------------

This patch does the following:

1) Change the definition of pthread_mutex_t, pthread_cond_t, pthread_once_t,
   plus the respective PTHREAD_MUTEX_INITIALIZER and PTHREAD_COND_INITIALIZER.
   This makes it possible for Miosix to increase the performance of
   pthread mutex and condition variables.

2) Add support for pthread_mutex_setattr() and pthread_mutex_getattr()
   to have posix recursive mutexes.

3) Turn the dummy default locks for stdio files into real pthread mutexes,
   to make concurrent access to stdio files threadsafe as required by POSIX.

4) modified sys/features.h and sys/config.h to fix a couple of quirks:
   _POSIX_THREADS and _UNIX98_THREAD_MUTEX_ATTRIBUTES were not defined, and
   as a result whithout #defining those macros before including pthread.h
   resulted in an empty pthread.h

5) Change the value of BUFSIZ from 1KB to 512 Bytes. This constant is used:
   - as a stack allocated buffer in _vfprintf_r
   - as default file buffer for any file, including stdin and stdout
   The default value of 1KB is simply too big for a small microcontroller.

6) Remove memory used by atexit() stuff
   Miosix has never called the finalizers registered with atexit(),
   onexit() and cxa_atexit() when main returned.
   However, the finalizers and their parameters in the cxa_atexit case
   (which is automatically called by gcc on every global C++ object), were
   still allocated, taking up sizeof(int)*3*32= 384 Bytes of wasted RAM
   This patch moves atexit support from newlib to Miosix, by making
   __register_exitproc() and __call_exitprocs() Miosix system calls, and by
   removing the memory used to handle atexit form the reentrancy structure.

7) Small change to abort(): avoid pulling in raise() since signals aren't
   supported anyway
